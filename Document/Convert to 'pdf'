#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "par_type=file; par_validate_conflict=true")

    # Check dependencies for each file type.
    local dependencies=""
    for input_file in $input_files; do
        case $(_get_command_use "$input_file") in
        "convert")
            dependencies+="
                command=convert; pkg_manager=apt; package=imagemagick |
                command=convert; pkg_manager=dnf; package=ImageMagick |
                command=convert; pkg_manager=pacman; package=imagemagick"
            ;;
        "inkscape") dependencies+="command=inkscape" ;;
        "latexmk")
            dependencies+="
                command=latexmk |
                pkg_manager=apt; package=texlive |
                pkg_manager=apt; package=texlive-fonts-extra |
                pkg_manager=apt; package=texlive-latex-extra |
                pkg_manager=apt; package=texlive-publishers |
                pkg_manager=apt; package=texlive-science |
                pkg_manager=apt; package=texlive-xetex |
                pkg_manager=dnf; package=texlive-scheme-basic |
                pkg_manager=dnf; package=texlive-mdwtools"
            ;;
        "libreoffice_calc") dependencies+="package=libreoffice-calc" ;;
        "libreoffice_impress") dependencies+="package=libreoffice-impress" ;;
        "libreoffice_writer") dependencies+="package=libreoffice-writer" ;;
        "pandoc_latex")
            dependencies+="
                command=pandoc |
                pkg_manager=apt; package=texlive |
                pkg_manager=dnf; package=texlive-scheme-basic |
                pkg_manager=dnf; package=texlive-mdwtools"
            ;;
        "pandoc") dependencies+="command=pandoc" ;;
        esac
        dependencies+=$'\n'
    done

    _check_dependencies "$dependencies"
    _display_wait_box
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    export -f _get_command_use

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""
    local output_format="pdf"

    output_file=$(_get_output_filename "$input_file" "$output_dir" "par_extension_opt=replace; par_extension=$output_format")

    # Run the main process.
    case $(_get_command_use "$input_file") in
    "convert")
        std_output=$(convert "$input_file" "$output_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
        ;;
    "inkscape")
        local inkscape_version=""
        local inkscape_version_old="1.0"
        inkscape_version=$(inkscape --version | cut -d " " -f 2)
        if [[ "$inkscape_version" == $(echo -e "$inkscape_version\n$inkscape_version_old" | sort -V | head -n1) ]]; then
            # Old Inkscape version.
            std_output=$(inkscape --without-gui --export-area-drawing --file="$input_file" --export-pdf="$output_file" 2>&1)
        else
            # New Inkscape version.
            std_output=$(inkscape --export-area-drawing --export-filename="$output_file" -- "$input_file" 2>&1)
        fi
        _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
        ;;
    "latexmk")
        # Use a local temporary directory to work.
        local filename=""
        local temp_dir_output=""
        filename=$(basename -- "$input_file")             # Remove the path.
        filename=$(_strip_filename_extension "$filename") # Remove the extension.
        temp_dir_output=$(mktemp --directory --tmpdir="$output_dir" "tmp.$filename.XXXXXXXXXX")

        output_file_temp=$(_get_output_filename "$input_file" "$temp_dir_output" "par_extension_opt=replace; par_extension=$output_format")

        std_output=$(latexmk -f -pdf -interaction=nonstopmode -output-directory="$temp_dir_output" "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file_temp"

        std_output=$(_move_file "rename" "$output_file_temp" "$output_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""

        # Remove the temporary directory.
        rm -rf -- "$temp_dir_output"
        ;;
    "libreoffice_calc" | "libreoffice_impress" | "libreoffice_writer")
        local output_file_temp=""
        local temp_file=""

        output_file_temp=$(_get_output_filename "$input_file" "$TEMP_DIR_TASK" "par_extension_opt=replace; par_extension=$output_format")

        # NOTE: Workaround to fix the bug 37531 in LibreOffice.
        # See the: https://bugs.documentfoundation.org/show_bug.cgi?id=37531
        temp_file="$(mktemp --tmpdir="$TEMP_DIR_TASK").bug37531"

        # NOTE: LibreOffice does not support ' -- ' in the command line.
        # NOTE: LibreOffice does not support defining the output file manually.
        std_output=$(libreoffice --headless --convert-to "$output_format" "-env:UserInstallation=file://$temp_file" --outdir "$TEMP_DIR_TASK" "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file_temp"

        # Remove the temporary file.
        rm -f -- "$temp_file"

        std_output=$(_move_file "rename" "$output_file_temp" "$output_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
        ;;
    "pandoc_latex")
        std_output=$(pandoc -V "geometry:margin=1.5cm" -V "geometry:a4paper" -V "fontfamily:charter" --standalone -o "$output_file" -- "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file"
        ;;
    "pandoc")
        std_output=$(pandoc --standalone -o "$output_file" -- "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file"
        ;;
    esac
}

_get_command_use() {
    local input_file=$1
    local file_mime=""
    local command_use=""

    # Get the mime type and define what command to use.
    file_mime=$(_get_file_mime "$input_file")

    # NOTE: See the file: /usr/share/mime/packages/freedesktop.org.xml
    case "${file_mime,,}" in
    *"wordprocessingml.document"*) command_use="libreoffice_writer" ;;    # docx
    *"presentationml.presentation"*) command_use="libreoffice_impress" ;; # pptx
    *"spreadsheetml.sheet"*) command_use="libreoffice_calc" ;;            # xlsx
    "application/msword") command_use="libreoffice_writer" ;;             # doc
    "application/vnd.ms-word") command_use="libreoffice_writer" ;;        # doc
    "application/x-msword") command_use="libreoffice_writer" ;;           # doc
    *"opendocument.formula"*) command_use="libreoffice_writer" ;;         # odf
    *"opendocument.graphics"*) command_use="libreoffice_impress" ;;       # odg
    *"opendocument.presentation"*) command_use="libreoffice_impress" ;;   # odp
    *"opendocument.spreadsheet"*) command_use="libreoffice_calc" ;;       # ods
    *"opendocument.text"*) command_use="libreoffice_writer" ;;            # odt
    "application/mspowerpoint") command_use="libreoffice_impress" ;;      # ppt
    "application/powerpoint") command_use="libreoffice_impress" ;;        # ppt
    "application/vnd.ms-powerpoint") command_use="libreoffice_impress" ;; # ppt
    "application/x-mspowerpoint") command_use="libreoffice_impress" ;;    # ppt
    "application/rtf") command_use="libreoffice_writer" ;;                # rtf
    "text/rtf") command_use="libreoffice_writer" ;;                       # rtf
    "image/svg+xml") command_use="inkscape" ;;                            # svg
    "image/svg+xml-compressed") command_use="inkscape" ;;                 # svgz
    "text/x-tex") command_use="latexmk" ;;                                # tex
    "application/msexcel") command_use="libreoffice_calc" ;;              # xls
    "application/vnd.ms-excel") command_use="libreoffice_calc" ;;         # xls
    "application/x-msexcel") command_use="libreoffice_calc" ;;            # xls
    "image/"*) command_use="convert" ;;                                   # (image files)
    "text/plain") command_use="pandoc_latex" ;;                           # (plain text files)
    "text/html") command_use="libreoffice_writer" ;;
    "text/xml") command_use="libreoffice_writer" ;;
    *)
        # If not found the 'file_mime', use the extension.
        case "${input_file,,}" in
        *.doc | *.docx) command_use="libreoffice_writer" ;;
        *.htm | *.html) command_use="libreoffice_writer" ;;
        *.odf | *.fodf) command_use="libreoffice_writer" ;;
        *.odg | *.fodg) command_use="libreoffice_impress" ;;
        *.odp | *.fodp) command_use="libreoffice_impress" ;;
        *.ods | *.fods) command_use="libreoffice_calc" ;;
        *.odt | *.fodt) command_use="libreoffice_writer" ;;
        *.ppt | *.pptx) command_use="libreoffice_impress" ;;
        *.svg | *.svgz) command_use="inkscape" ;;
        *.xls | *.xlsx) command_use="libreoffice_calc" ;;
        *.rtf) command_use="libreoffice_writer" ;;
        *) command_use="pandoc" ;;
        esac
        ;;
    esac

    printf "%s" "$command_use"
}

_main "$@"
