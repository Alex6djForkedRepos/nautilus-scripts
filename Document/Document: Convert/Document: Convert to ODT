#!/usr/bin/env bash

# Source the script '_common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/_common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _dependencies_check_commands ""
    input_files=$(_get_files "par_type=file; par_validate_conflict=true; par_select_extension='csv|doc|docx|epub|fb2|fodf|fodg|fodp|fods|fodt|gfm|htm|html|json|markdown|md|odf|odg|odp|ods|opml|org|ppt|pptx|rst|rtf|tex|txt|xls|xlsx'")

    local dependencies=""
    dependencies=$(_get_dependencies "$input_files")
    _dependencies_check_metapackages "$dependencies"
    _display_wait_box "2"
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    export -f _get_command _run_command

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local command=""

    # Run the main process.
    command=$(_get_command "$input_file")
    _run_command "$input_file" "$command" "$output_dir"
}

_get_dependencies() {
    local input_files=$1
    local dependencies=""

    # Check dependencies for each file.
    local input_file=""
    for input_file in $input_files; do
        local command=""
        command=$(_get_command "$input_file")

        case $command in
        "libreoffice_writer")
            if ! _command_exists "libreoffice.writer" &&
                ! _command_exists "lowriter" &&
                ! _command_exists "libreoffice-writer"; then
                dependencies+="lowriter"
            fi
            ;;
        "pandoc")
            if ! _command_exists "pandoc"; then
                dependencies+="pandoc"
            fi
            ;;
        esac
        dependencies+=$'\n'
    done

    printf "%s" "$dependencies"
}

_get_command() {
    local input_file=$1
    local command=""

    case "${input_file,,}" in
    *.doc | *.docx) command="libreoffice_writer" ;;
    *.htm | *.html) command="libreoffice_writer" ;;
    *.odf | *.fodf) command="libreoffice_writer" ;;
    *.odt | *.fodt) command="libreoffice_writer" ;;
    *.rtf) command="libreoffice_writer" ;;
    *) command="pandoc" ;;
    esac

    printf "%s" "$command"
}

_run_command() {
    local input_file=$1
    local command=$2
    local output_dir=$3
    local output_format="odt"

    output_file=$(_get_output_filename "$input_file" "$output_dir" "par_extension_opt=replace; par_extension=$output_format")

    # Run the main process.
    case $command in
    "libreoffice_writer")
        # Use a local temporary directory to work.
        local basename=""
        local temp_dir_local=""
        local temp_output_file=""
        basename=$(basename -- "$input_file")             # Remove the path.
        basename=$(_strip_filename_extension "$basename") # Remove the extension.
        temp_dir_local=$(_get_temp_dir_local "$output_dir" ".$basename")

        # NOTE: Workaround to fix the bug 37531 in LibreOffice.
        # See the: https://bugs.documentfoundation.org/show_bug.cgi?id=37531
        local temp_dir=""
        temp_dir=$(_get_temp_file_dry)

        # NOTE: LibreOffice does not support '--' in the command line.
        # NOTE: LibreOffice does not support defining the output file manually.
        std_output=$(libreoffice --headless --convert-to "$output_format" "-env:UserInstallation=file://$temp_dir" --outdir "$temp_dir_local" "$input_file" 2>&1)

        temp_output_file=$(find "$temp_dir_local" -type f -name "*.$output_format" -print -quit 2>/dev/null)
        _move_file "rename" "$temp_output_file" "$output_file"

        # Remove the temporary directory.
        rm -rf -- "$temp_dir_local"

        _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
        ;;
    "pandoc")
        std_output=$(pandoc --standalone -o "$output_file" -- "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
        ;;
    esac
}

_main "$@"
