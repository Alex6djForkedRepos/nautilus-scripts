#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies "pandoc"
    _display_wait_box
    input_files=$(_get_files "type:file, validate_conflict:true")
    output_dir=$(_get_output_dir "use_same_dir:true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""

    __get_command_use() {
        local _input_file=$1
        local file_mime=""
        local filename_extension=""
        local command_use=""

        # Get the mime type and define what command to use.
        file_mime=$(file --dereference --brief --mime-type -- "$_input_file")

        case "${file_mime,,}" in
        *"octet-stream"*) # Can not find from mime. So, use the extension.
            filename_extension=$(_get_filename_extension "$_input_file")
            case "${filename_extension,,}" in
            ".doc"*) command_use="libreoffice" ;;
            ".xls"*) command_use="libreoffice" ;;
            ".ppt"*) command_use="libreoffice" ;;
            ".odt") command_use="libreoffice" ;;
            ".ods") command_use="libreoffice" ;;
            ".odp") command_use="libreoffice" ;;
            ".odg") command_use="libreoffice" ;;
            ".odf") command_use="libreoffice" ;;
            *) command_use="pandoc" ;;
            esac
            ;;
        *"wordprocessingml.document"*) command_use="libreoffice" ;;   # docx
        *"presentationml.presentation"*) command_use="libreoffice" ;; # pptx
        *"spreadsheetml.sheet"*) command_use="libreoffice" ;;         # xlsx
        *"opendocument.text"*) command_use="libreoffice" ;;           # odt
        *"opendocument.presentation"*) command_use="libreoffice" ;;   # odp
        *"opendocument.spreadsheet"*) command_use="libreoffice" ;;    # ods
        *"opendocument.graphics"*) command_use="libreoffice" ;;       # odg
        *"opendocument.formula"*) command_use="libreoffice" ;;        # odf
        *"msword"*) command_use="libreoffice" ;;                      # doc
        *"ms-powerpoint"*) command_use="libreoffice" ;;               # ppt
        *"ms-excel"*) command_use="libreoffice" ;;                    # xls
        *"text/rtf"*) command_use="libreoffice" ;;                    # rtf
        *"text/xml"*) command_use="libreoffice" ;;                    # fodt, fodp, fods...
        *) command_use="pandoc" ;;
        esac

        printf "%s" "$command_use"
    }

    # Run the main process.
    case $(__get_command_use "$input_file") in
    "libreoffice")
        # The 'libreoffice' does not support define the outputfile manually.
        local output_file_temp=""
        output_file_temp=$(_get_output_filename "$input_file" "$TEMP_DIR_TASK" "extension_opt:replace, extension:pdf")
        output_file=$(_get_output_filename "$input_file" "$output_dir" "extension_opt:replace, extension:pdf")

        # The 'libreoffice' does not support ' -- ' in the command line.
        std_output=$(libreoffice --headless --convert-to "pdf" --outdir "$TEMP_DIR_TASK" "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file_temp"

        std_output=$(_move_file "rename" "$output_file_temp" "$output_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
        ;;
    *)
        output_file=$(_get_output_filename "$input_file" "$output_dir" "extension_opt:replace, extension:pdf")
        std_output=$(pandoc -V "header-includes:\usepackage[a4paper, margin=1.5cm]{geometry} \usepackage{newtxtext, newtxmath}" --standalone -o "$output_file" -- "$input_file" 2>&1)
        _check_output "$?" "$std_output" "$input_file" "$output_file"

        ;;
    esac
}

_main "$@"
