#!/usr/bin/env bash

# Source the file 'scripts/common-functions'
# shellcheck disable=SC1090
source "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")" | sed 's|\(scripts\).*|\1/common-functions|')"

# Initial checks
INPUT_FILES=$(_get_files "$*" "directory" "1" "" "d") || exit 1
OUTPUT_DIR="$PWD"

_flatten() {
    local DIRECTORY="$1"
    local UNDO_SCRIPT="undo_flatten.sh"
    local TEMP_LIST_FILES=""
    local FILENAME=""
    local STD_OUTPUT=""
    local EXIT_CODE=0

    TEMP_LIST_FILES=$(mktemp)
    (
        cd "$DIRECTORY" || true

        # Make 'undo' file
        if ! [ -f "$UNDO_SCRIPT" ]; then
            echo "#!/usr/bin/env bash" >"$UNDO_SCRIPT"
        fi

        # Make a list of files to move
        find . -type f ! -name "$UNDO_SCRIPT" >>"$TEMP_LIST_FILES"

        # Make a backup of directory tree
        find . -type d | grep "/" | xargs -I{} echo "mkdir -p \"{}\"" >>"$UNDO_SCRIPT"

        while read -r FULL_PATH_FILENAME; do
            FILENAME=$(basename "$FULL_PATH_FILENAME")

            # Move all selected files to local folder
            STD_OUTPUT=$(_move_file "$FULL_PATH_FILENAME" "$FILENAME" 2>&1)
            # shellcheck disable=SC2030
            EXIT_CODE=$?

            _log_result_error "$FULL_PATH_FILENAME" "$STD_OUTPUT" "$OUTPUT_DIR" "$EXIT_CODE" ""

            if ((EXIT_CODE == 0)) && [[ "${STD_OUTPUT,,}" == "moved"* ]]; then
                # Print 'mv' command in Undo script
                echo "mv \"$FILENAME\" \"$FULL_PATH_FILENAME\"" >>"$UNDO_SCRIPT"
            fi
        done <"$TEMP_LIST_FILES"

        # Set the 'undo' file as executable
        chmod +x "$UNDO_SCRIPT"

        # Remove empty directories
        find . -type d -empty -delete
    )

    # Remove temporary file
    rm -f "$TEMP_LIST_FILES"
}

for DIRECTORY in $INPUT_FILES; do
    # Run the main process
    _flatten "$DIRECTORY"
done

_display_result "$OUTPUT_DIR"
