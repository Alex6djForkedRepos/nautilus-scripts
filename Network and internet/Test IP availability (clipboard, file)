#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    if [[ -n "${XDG_SESSION_TYPE+x}" ]] &&
        [[ "${XDG_SESSION_TYPE,,}" == "wayland" ]]; then
        _check_dependencies "command=nmap | command=wl-paste; package=wl-clipboard"
    else
        _check_dependencies "command=nmap | command=xclip"
    fi

    _display_wait_box "2"
    input_files=$(_get_files "par_type=all; par_get_pwd=true")

    # Export functions to be used inside new shells (when using 'xargs').
    export -f _resolve_host

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$(_prepare_input "$input_files")" "$output_dir"

    local std_output=""
    std_output=$(_storage_text_read_all)
    std_output=$(sort --version-sort --reverse <<<"$std_output")

    _display_list_box "$std_output" "par_columns='--column:Status,--column:Response,--column:IP,--column:Hostname'; par_item_name=IPs"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""
    local str_online="Online"
    local status="ðŸŸ¢"
    local hostname=""

    local host="$input_file"
    local timeout_value="3"

    # Strategy: Nmap host discovery (no port scan).
    if [[ -z "$std_output" ]]; then
        if LC_ALL=C nmap -sn --host-timeout "$timeout_value"s "$host" 2>/dev/null |
            grep --quiet --ignore-case "Host is up"; then
            std_output=$str_online
        fi
    fi

    # Strategy: Nmap port scan (SYN scan on top 20 ports).
    if [[ -z "$std_output" ]]; then
        if LC_ALL=C nmap -T4 -Pn --top-ports 20 --host-timeout "$timeout_value"s "$host" 2>/dev/null |
            grep --quiet --ignore-case "open"; then
            std_output=$str_online
        fi
    fi

    # Strategy: ICMP Echo Request (fast but often filtered by firewalls).
    if [[ -z "$std_output" ]]; then
        if ping -c 3 -W "$timeout_value" "$host" &>/dev/null; then
            std_output=$str_online
        fi
    fi

    # Notify if the host is offline.
    if [[ -z "$std_output" ]]; then
        std_output="Offline"
        status="ðŸ”´"
    fi

    hostname=$(_resolve_host "$input_file")
    if [[ -z "$hostname" ]]; then
        hostname="(unknown)"
    fi

    _storage_text_write_ln "$status$FIELD_SEPARATOR$std_output$FIELD_SEPARATOR$input_file$FIELD_SEPARATOR$hostname"
}

_extract_ips() {
    local data=$1
    local output=""
    local ip=""
    local base=""
    local start=""
    local end=""

    if [[ -z "$data" ]]; then
        return
    fi

    # Extract:
    #   - Single IPs
    #   - IP ranges (192.168.1.1-254)
    #   (CIDR notation like 192.168.1.0/24 is ignored)
    data=$(grep -oP '\b(?:(?:25[0-5]|2[0-4]\d|1?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|1?\d?\d)(?:-\d{1,3})?\b' <<<"$data")

    # Expand IP ranges.
    while read -r ip; do
        # Case: IP range (e.g., 192.168.1.1-254).
        if [[ "$ip" =~ ^([0-9]+\.[0-9]+\.[0-9]+)\.([0-9]+)-([0-9]+)$ ]]; then
            base="${BASH_REMATCH[1]}"
            start="${BASH_REMATCH[2]}"
            end="${BASH_REMATCH[3]}"
            for ((i = start; i <= end; i++)); do
                output+="$base.$i"$'\n'
            done
        # Case: Single IP.
        else
            output+="$ip"$'\n'
        fi
    done <<<"$data"

    output=$(sort --unique <<<"$output")
    output=$(_text_remove_empty_lines "$output")

    printf "%s" "$output"
}

_prepare_input() {
    local input_files=$1
    local file_data=""
    local clipboard_data=""
    local ips=""

    # shellcheck disable=SC2086
    file_data=$(cat -- $input_files 2>/dev/null)
    ips=$(_extract_ips "$file_data")

    # If there are no valid IPs in the file(s),
    # get the IPs from the clipboard.
    if [[ -z "$ips" ]]; then
        clipboard_data=$(_get_clipboard_data)
        ips=$(_extract_ips "$clipboard_data")
    fi

    if [[ -z "$ips" ]]; then
        _display_error_box "There are no valid IPs in the clipboard or in the selected file(s)!"
        _exit_script
    fi

    _convert_text_to_delimited_string "$ips"
}

_resolve_host() {
    local ip=$1
    local hostname=""

    # Try local resolution (via /etc/hosts, NSS, etc.).
    hostname=$(getent hosts "$ip" | awk '{print $2}' | head -n1)

    if [[ -n "$hostname" ]]; then
        printf "%s" "$hostname"
        return 0
    fi

    # If not found locally, try online resolution.
    if _command_exists "host"; then
        hostname=$(host "$ip" | awk '/domain name pointer/ {print $5}')
    elif _command_exists "dig"; then
        hostname=$(dig -x "$ip" +short)
    fi

    # shellcheck disable=SC2001
    hostname=$(sed "s|\.$||" <<<"$hostname")

    printf "%s" "$hostname"
}

_main "$@"
