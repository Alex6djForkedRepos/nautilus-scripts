#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Shift>G

# Source the script '.common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/.common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies_clipboard "git"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=all")
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$(_prepare_input "$input_files")" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    __git_repo_dir_name() {
        local repo_url=$1
        local dir_name=""

        # Remove possible trailing slash.
        repo_url=${repo_url%/}

        # Extract the part after the last slash and remove .git if present.
        dir_name=$(basename -- "$repo_url")
        dir_name=${dir_name%.git}

        printf '%s\n' "$dir_name"
    }

    local repo_dir_name=""
    repo_dir_name=$(__git_repo_dir_name "$input_file")
    dir_name=$(_get_output_filename "$output_dir/$repo_dir_name" "$output_dir" "par_extension_opt=preserve")

    # Run the main process.
    std_output=$(git clone -q -- "$input_file" "$dir_name" 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1
}

_extract_git_urls() {
    local data=$1

    if [[ -z "$data" ]]; then
        return
    fi

    # Convert HTTPS to SSH form.
    data=$(sed -E 's#https://([^/]+)/([^/]+)/([^ ]+)#git@\1:\2/\3#g' <<<"$data")

    # Append ".git" only if missing.
    if [[ "$data" != *.git ]]; then
        data="${data}.git"
    fi

    # Keep only valid Git URLs.
    data=$(grep --only-matching --perl-regexp "((git|ssh|http(s)?)|(git@[\w\.]+))(.*)(\.git)" <<<"$data")
    data=$(sort --unique <<<"$data")

    printf "%s" "$data"
}

_prepare_input() {
    local input_files=$1
    local file_data=""
    local clipboard_data=""
    local urls=""

    # shellcheck disable=SC2086
    file_data=$(cat -- $input_files 2>/dev/null)
    urls=$(_extract_git_urls "$file_data")

    # If there are no valid URLs in the file(s),
    # get the URLs from the clipboard.
    if [[ -z "$urls" ]]; then
        clipboard_data=$(_get_clipboard_data)
        urls=$(_extract_git_urls "$clipboard_data")
    fi

    if [[ -z "$urls" ]]; then
        _display_error_box "There are no valid Git URLs in the clipboard or in the selected file(s)!"
        _exit_script
    fi

    _convert_text_to_delimited_string "$urls"
}

_main "$@"
