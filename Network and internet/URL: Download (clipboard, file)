#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Shift>X

# Source the script '_common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/_common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _dependencies_check_commands_clipboard "axel"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=all")
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$(_prepare_input "$input_files")" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""
    local timeout_value="5"

    # Run the main process.
    std_output=$(axel --insecure --num-connections=10 --timeout="$timeout_value" --output="$output_dir" -- "$input_file" 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1
}

# FUNCTION: _extract_urls
#
# DESCRIPTION:
# This function extracts unique URLs or domain-like strings from input text.
# It matches three main types:
#  - URLs with IP addresses (with optional port and path)
#  - URLs with domain names (with optional port, path, or subdomains)
#  - Plain domain names, with or without "www."
#
# Example matches:
#  - http://192.168.0.1:8080/api
#  - https://example.com/path
#  - www.google.com
#  - example.org
#
# The function sorts and deduplicates the matches before printing.
_extract_urls() {
    local data=$1
    local re_ip="https?://(?:[0-9]{1,3}\.){3}[0-9]{1,3}"
    local re_port_path="(?::[0-9]+)?(?:/[^[:space:]'\"\)\]\>]*)?"
    local re_domain="https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    local re_plain="(?:www\.)?[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"

    if [[ -z "$data" ]]; then
        return
    fi

    data=$(grep --only-matching --perl-regexp \
        "($re_ip$re_port_path|$re_domain$re_port_path|$re_plain)" <<<"$data")
    data=$(sort --unique <<<"$data")

    printf "%s" "$data"
}

_prepare_input() {
    local input_files=$1
    local file_data=""
    local clipboard_data=""
    local urls=""

    # shellcheck disable=SC2086
    file_data=$(cat -- $input_files 2>/dev/null)
    urls=$(_extract_urls "$file_data")

    # If there are no valid URLs in the file(s),
    # get the URLs from the clipboard.
    if [[ -z "$urls" ]]; then
        clipboard_data=$(_get_clipboard_data)
        urls=$(_extract_urls "$clipboard_data")
    fi

    if [[ -z "$urls" ]]; then
        _display_error_box "There are no valid URLs in the clipboard or in the selected file(s)!"
        _exit_script
    fi

    _convert_text_to_delimited_string "$urls"
}

_main "$@"
