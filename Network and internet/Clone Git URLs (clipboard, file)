#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Shift>G

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    if [[ -n "${XDG_SESSION_TYPE+x}" ]] &&
        [[ "${XDG_SESSION_TYPE,,}" == "wayland" ]]; then
        _check_dependencies "command=git | command=wl-paste; package=wl-clipboard"
    else
        _check_dependencies "command=git | command=xclip"
    fi

    _display_wait_box "2"
    input_files=$(_get_files "par_type=all; par_get_pwd=true")
    output_dir=$(_get_working_directory_alternative)

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$(_prepare_input "$input_files")" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    _directory_push "$output_dir" 2>/dev/null || return 1

    # Run the main process.
    std_output=$(git clone -q -- "$input_file" 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1
    _directory_pop || return 1
}

_get_clipboard_data() {
    if [[ -n "${XDG_SESSION_TYPE+x}" ]] &&
        [[ "${XDG_SESSION_TYPE,,}" == "wayland" ]]; then
        wl-paste 2>/dev/null
    else
        xclip -quiet -selection clipboard -o 2>/dev/null
    fi
}

_extract_git_urls() {
    local data=$1

    if [[ -z "$data" ]]; then
        return
    fi

    # If the URL is like: https://<host>/<user>/<repo>
    # convert it to git@<host>:<user>/<repo>.git
    data=$(sed -E 's#https://([^/]+)/([^/]+)/([^ ]+)#git@\1:\2/\3.git#g' <<<"$data")

    # Ensure the URL always ends with .git (if missing).
    data=$(sed -E 's#(\.git)?$#.git#' <<<"$data")

    # Keep only valid Git URLs.
    data=$(grep --only-matching --perl-regexp "((git|ssh|http(s)?)|(git@[\w\.]+))(.*)(\.git)" <<<"$data")
    data=$(sort --unique <<<"$data")

    printf "%s" "$data"
}

_prepare_input() {
    local input_files=$1
    local item_1=""
    local file_data=""
    local clipboard_data=""

    # Check if the input is a file or a directory. If it is a directory,
    # get the URLs from the clipboard.
    item_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$input_files")
    if [[ ! -d "$item_1" ]]; then
        # shellcheck disable=SC2086
        file_data=$(cat -- $input_files 2>/dev/null)
        data=$(_extract_git_urls "$file_data")
    fi

    # If there are no valid URLs in the file(s),
    # get the URLs from the clipboard.
    if [[ -z "$data" ]]; then
        clipboard_data=$(_get_clipboard_data)
        data=$(_extract_git_urls "$clipboard_data")
    fi

    if [[ -z "$data" ]]; then
        _display_error_box "There are no valid Git URLs in the clipboard or in the selected file(s)!"
        _exit_script
    fi

    _convert_text_to_delimited_string "$data"
}

_get_working_directory_alternative() {
    local working_directory=""

    # Try to use the information provided by the file manager.
    if [[ -v "CAJA_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$CAJA_SCRIPT_CURRENT_URI
    elif [[ -v "NEMO_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$NEMO_SCRIPT_CURRENT_URI
    elif [[ -v "NAUTILUS_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$NAUTILUS_SCRIPT_CURRENT_URI
    fi

    if [[ -n "$working_directory" ]] && [[ "$working_directory" == "file://"* ]]; then
        working_directory=$(_text_uri_decode "$working_directory")
    else
        # Files selected in the search screen (or orther possible cases).
        working_directory=""
    fi

    if [[ -z "$working_directory" ]]; then
        # NOTE: The working directory can be detected by using the directory
        # name of the first input file. Some file managers do not send the
        # working directory for the scripts, so it is not precise to use the
        # 'pwd' command.
        local item_1=""
        local item_2=""
        item_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$INPUT_FILES")
        item_2=$(cut -d "$FIELD_SEPARATOR" -f 2 <<<"$INPUT_FILES")

        if [[ -n "$item_1" ]]; then
            if [[ -n "$item_2" ]] && [[ "$item_1" != "$item_2" ]]; then
                working_directory=$(_get_filename_dir "$item_1")
            elif [[ -f "$item_1" ]]; then
                working_directory=$(_get_filename_dir "$item_1")
            elif [[ -d "$item_1" ]]; then
                working_directory=$(_get_filename_full_path "$item_1")
            fi
        else
            working_directory=$(pwd)
        fi
    fi

    printf "%s" "$working_directory"
}

_main "$@"
