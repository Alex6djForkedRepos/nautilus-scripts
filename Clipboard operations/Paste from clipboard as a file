#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local output_dir=""

    # Execute initial checks.
    if [[ -n "${XDG_SESSION_TYPE+x}" ]] &&
        [[ "${XDG_SESSION_TYPE,,}" == "wayland" ]]; then
        _check_dependencies "command=wl-paste; package=wl-clipboard"
    else
        _check_dependencies "command=xclip; package=xclip"
    fi

    _display_wait_box "2"
    output_dir=$(_get_working_directory_alternative)

    # Save the clipboard to file.
    _save_file_from_clipboard

    _display_result_box "$output_dir"
}

_save_file_from_clipboard() {
    local output_file=""
    local std_output=""

    if [[ -n "${XDG_SESSION_TYPE+x}" ]] &&
        [[ "${XDG_SESSION_TYPE,,}" == "wayland" ]]; then

        if wl-paste --list-types 2>/dev/null | grep -q "image/png"; then
            output_file=$(_get_output_filename "Clipboard.png" \
                "$output_dir" "par_extension_opt=preserve")

            std_output=$(wl-paste --no-newline --type "image/png" \
                >"$output_file" 2>&1)
        else
            output_file=$(_get_output_filename "Clipboard.txt" \
                "$output_dir" "par_extension_opt=preserve")

            std_output=$(wl-paste --no-newline --type "text/plain" \
                >"$output_file" 2>&1)
        fi
    else
        if xclip -selection clipboard -t TARGETS -o 2>/dev/null |
            grep -q "image/png"; then
            output_file=$(_get_output_filename "Clipboard.png" \
                "$output_dir" "par_extension_opt=preserve")

            std_output=$(xclip -selection clipboard -t "image/png" -o \
                >"$output_file" 2>&1)
        else
            output_file=$(_get_output_filename "Clipboard.txt" \
                "$output_dir" "par_extension_opt=preserve")

            std_output=$(xclip -selection clipboard -t "text/plain" -o \
                >"$output_file" 2>&1)
        fi
    fi

    _check_output "$?" "$std_output" "" "$output_file" || return 1
}

_get_working_directory_alternative() {
    local working_directory=""

    # Try to use the information provided by the file manager.
    if [[ -v "CAJA_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$CAJA_SCRIPT_CURRENT_URI
    elif [[ -v "NEMO_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$NEMO_SCRIPT_CURRENT_URI
    elif [[ -v "NAUTILUS_SCRIPT_CURRENT_URI" ]]; then
        working_directory=$NAUTILUS_SCRIPT_CURRENT_URI
    fi

    if [[ -n "$working_directory" ]] && [[ "$working_directory" == "file://"* ]]; then
        working_directory=$(_text_uri_decode "$working_directory")
    else
        # Files selected in the search screen (or orther possible cases).
        working_directory=""
    fi

    if [[ -z "$working_directory" ]]; then
        # NOTE: The working directory can be detected by using the directory
        # name of the first input file. Some file managers do not send the
        # working directory for the scripts, so it is not precise to use the
        # 'pwd' command.
        local item_1=""
        local item_2=""
        item_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$INPUT_FILES")
        item_2=$(cut -d "$FIELD_SEPARATOR" -f 2 <<<"$INPUT_FILES")

        if [[ -n "$item_1" ]]; then
            if [[ -n "$item_2" ]] && [[ "$item_1" != "$item_2" ]]; then
                working_directory=$(_get_filename_dir "$item_1")
            elif [[ -f "$item_1" ]]; then
                working_directory=$(_get_filename_dir "$item_1")
            elif [[ -d "$item_1" ]]; then
                working_directory=$(_get_filename_full_path "$item_1")
            fi
        else
            working_directory=$(pwd)
        fi
    fi

    printf "%s" "$working_directory"
}

_main "$@"
