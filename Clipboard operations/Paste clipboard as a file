#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Alt>V

# Source the script '_common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/_common-functions.sh"

_main() {
    local output_dir=""

    # Execute initial checks.
    _check_dependencies_clipboard ""
    _display_wait_box "2"
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Run the main process.
    _save_file_from_clipboard "$output_dir"

    _display_result_box "$output_dir"
}

_save_file_from_clipboard() {
    local output_dir=$1

    # Determine which clipboard tool is available (Wayland or X11) and list the
    # available clipboard data types (MIME types).
    local clipboard_tool=""
    local clipboard_types=""
    if [[ "${XDG_SESSION_TYPE:-}" == "wayland" ]]; then
        clipboard_tool="wl-paste"
        clipboard_types=$($clipboard_tool --list-types 2>/dev/null)
    else
        clipboard_tool="xclip"
        clipboard_types=$($clipboard_tool -selection clipboard -t TARGETS -o 2>/dev/null)
    fi

    # Define a mapping between MIME types and file extensions.
    declare -A mime_map=(
        ["text/plain"]="txt"
        ["image/png"]="png"
        ["image/jpeg"]="jpg"
        ["image/webp"]="webp"
        ["image/bmp"]="bmp"
        ["text/html"]="html"
        ["application/pdf"]="pdf"
        ["application/json"]="json"
        ["text/markdown"]="md"
        ["text/uri-list"]="uri"
        ["text/x-shellscript"]="sh"
    )

    # Find the first supported MIME type in clipboard data.
    local supported_type=""
    local mime=""
    for mime in "${!mime_map[@]}"; do
        supported_type=$(grep -m1 "$mime" 2>/dev/null <<<"$clipboard_types")
        [[ -n "$supported_type" ]] && break
    done

    if [[ -z "$supported_type" ]]; then
        _display_error_box "Unsupported clipboard type."
        _exit_script
    fi

    local ext=""
    ext="${mime_map[$mime]}"

    # Define file extension and output filename.
    local basename="Clipboard"
    local output_file=""
    output_file=$(_get_output_filename "$basename.$ext" "$output_dir" "par_extension_opt=preserve")

    # Extract clipboard content and save to output file.
    if [[ "$clipboard_tool" == "wl-paste" ]]; then
        $clipboard_tool --no-newline --type "$supported_type" >"$output_file" 2>/dev/null
    else
        $clipboard_tool -selection clipboard -t "$supported_type" -o >"$output_file" 2>/dev/null
    fi
    _check_output "$?" "" "" "$output_file" || return 1

    # If it's a text file, try to detect the programming language.
    if [[ "$ext" == "txt" ]]; then
        ext=$(_detect_text_language "$output_file")

        # If a specific language is detected, rename the file accordingly.
        if [[ "$ext" != "txt" ]]; then
            _move_file "rename" "$output_file" "$basename.$ext"
        fi
    fi
}

# FUNCTION: _detect_text_language
#
# DESCRIPTION:
# Infers the programming language of a text file based on its shebang line.
#
# PARAMETERS:
#   $1 (file): Path to the text file to analyze.
_detect_text_language() {
    local file=$1
    local ext="txt"

    local first_line=""
    first_line=$(head -n 1 "$file")

    # Detect language by shebang.
    case "$first_line" in
    "#!"*bash*) ext="sh" ;;
    "#!"*python*) ext="py" ;;
    "#!"*perl*) ext="pl" ;;
    "#!"*ruby*) ext="rb" ;;
    "#!"*php*) ext="php" ;;
    esac

    printf "%s" "$ext"
}

_main "$@"
