#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""
    local input_file=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "type:file")

    # Check dependencies for each file type.
    local dependencies=""
    for input_file in $input_files; do
        case $(_get_command_use "$input_file") in
        "7za") dependencies+="7za(apt:p7zip-full,pacman:p7zip,dnf:p7zip)" ;;
        "ar") dependencies+="ar(binutils)" ;;
        "bunzip2") _command_exists "7za" || dependencies+="bunzip2(bzip2)" ;;
        "gunzip") _command_exists "7za" || dependencies+="gunzip(gzip)" ;;
        "lha") dependencies+="lha(lhasa)" ;;
        "lrzip") dependencies+="lrzip" ;;
        "lz4") dependencies+="lz4" ;;
        "lzip") dependencies+="lzip" ;;
        "lzop") dependencies+="lzop" ;;
        "tar") dependencies+="tar" ;;
        "tar+bunzip2") dependencies+="tar bunzip2(bzip2)" ;;
        "tar+gunzip_uncompress") dependencies+="tar gunzip(gzip)" ;;
        "tar+gunzip") dependencies+="tar gunzip(gzip)" ;;
        "tar+lrzip") dependencies+="tar lrzip" ;;
        "tar+lz4") dependencies+="tar lz4" ;;
        "tar+lzip") dependencies+="tar lzip" ;;
        "tar+lzop") dependencies+="tar lzop" ;;
        "tar+xz_lzma") dependencies+="tar xz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "tar+xz") dependencies+="tar xz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "tar+zstd") dependencies+="tar zstd" ;;
        "uncompress") _command_exists "7za" || dependencies+="gunzip(gzip)" ;;
        "unrar") dependencies+="unrar" ;;
        "unsquashfs") dependencies+="unsquashfs(squashfs-tools)" ;;
        "unzip") _command_exists "7za" || dependencies+="unzip" ;;
        "xorriso") dependencies+="xorriso" ;;
        "xz_lzma") dependencies+="xz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "xz") dependencies+="xz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "zstd") dependencies+="zstd" ;;
        esac
        dependencies+=" "
    done

    _check_dependencies "$dependencies"
    _display_wait_box

    export -f _get_command_use

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" ""
    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local count_root_items=""
    local output_item=""
    local std_output=""

    if [[ -z "$output_dir" ]]; then
        output_dir=$(dirname -- "$input_file")
    fi

    # Use a local temporary directory to work.
    local filename=""
    local temp_dir_output=""
    filename=$(basename -- "$input_file")             # Remove the path.
    filename=$(_strip_filename_extension "$filename") # Remove the extension.
    temp_dir_output=$(mktemp --directory --tmpdir="$output_dir" "tmp.$filename.XXXXXXXXXX")

    mkdir --parents "$temp_dir_output"
    pushd "$temp_dir_output" &>/dev/null || true

    # Extract the archive according to the file extension.
    case $(_get_command_use "$input_file") in
    "7za") std_output=$(7za x -aoa -- "$input_file" 2>&1) ;;
    "ar") std_output=$(ar x -- "$input_file" 2>&1) ;;
    "bunzip2")
        if _command_exists "7za"; then
            std_output=$(7za x -aoa -- "$input_file" 2>&1)
        else
            std_output=$(bunzip2 -k -c -- "$input_file" >"$filename" 2>&1)
        fi
        ;;
    "gunzip")
        if _command_exists "7za"; then
            std_output=$(7za x -aoa -- "$input_file" 2>&1)
        else
            std_output=$(gunzip -k -c -- "$input_file" >"$filename" 2>&1)
        fi
        ;;
    "lha") std_output=$(lha -e "$input_file" 2>&1) ;;
    "lrzip") std_output=$(lrzip -d -o "$temp_dir_output/$filename" -- "$input_file" 2>&1) ;;
    "lz4") std_output=$(lz4 -d -c -- "$input_file" >"$filename" 2>&1) ;;
    "lzip") std_output=$(lzip -k -d -c -- "$input_file" >"$filename" 2>&1) ;;
    "lzop") std_output=$(lzop -d -- "$input_file" 2>&1) ;;
    "tar") std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    "tar+bunzip2") std_output=$(tar --extract --bzip2 --file="$input_file" 2>&1) ;;
    "tar+gunzip_uncompress") std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    "tar+gunzip") std_output=$(tar --extract --gzip --file="$input_file" 2>&1) ;;
    "tar+lrzip") std_output=$(lrztar -d "$input_file" 2>&1) ;;
    "tar+lz4") std_output=$(lz4 -d -c -- "$input_file" | tar xf - 2>&1) ;;
    "tar+lzip") std_output=$(tar --extract --lzip --file="$input_file" 2>&1) ;;
    "tar+lzop") std_output=$(tar --extract --lzop --file="$input_file" 2>&1) ;;
    "tar+xz_lzma") std_output=$(tar --extract --lzma --file="$input_file" 2>&1) ;;
    "tar+xz") std_output=$(tar --extract --xz --file="$input_file" 2>&1) ;;
    "tar+zstd")
        std_output=$(zstd -d "$input_file" -o ".temp.tar" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
        std_output=$(tar --extract --file=".temp.tar" 2>&1)
        rm -f ".temp.tar"
        ;;
    "uncompress")
        if _command_exists "7za"; then
            std_output=$(7za x -aoa -- "$input_file" 2>&1)
        else
            std_output=$(gunzip -k -c -- "$input_file" >"$filename" 2>&1)
        fi
        ;;
    "unrar") std_output=$(unrar x -- "$input_file" 2>&1) ;;
    "unsquashfs") std_output=$(unsquashfs "$input_file" 2>&1) ;;
    "unzip")
        if _command_exists "7za"; then
            std_output=$(7za x -aoa -- "$input_file" 2>&1)
        else
            std_output=$(unzip -- "$input_file" 2>&1)
        fi
        ;;
    "xorriso") std_output=$(xorriso -osirrox on -indev "$input_file" -find / -exec chmod u+rw -- -extract / . -rollback_end 2>&1) ;;
    "xz_lzma") std_output=$(xz --format=lzma --decompress -k -c -- "$input_file" >"$filename" 2>&1) ;;
    "xz") std_output=$(xz --decompress -k -c -- "$input_file" >"$filename" 2>&1) ;;
    "zstd") std_output=$(zstd --decompress -c -- "$input_file" >"$filename" 2>&1) ;;
    esac

    # Check for result errors.
    _check_output "$?" "$std_output" "$input_file" ""

    # Check if the archive has just one item (single file/directory compressed).
    count_root_items=$(find . -mindepth 1 -maxdepth 1 2>/dev/null | wc -l)
    if ((count_root_items == 1)); then
        output_item=$(find . -mindepth 1 -maxdepth 1 2>/dev/null)
        output_item="${output_item#./}"
    fi
    popd &>/dev/null || true

    # Check if the 'temp_dir_output' is empty.
    if ((count_root_items == 0)); then
        _check_output "$?" "$std_output" "$input_file" "-"
        # Remove the temporary directory.
        rm -rf -- "$temp_dir_output"
        return 1
    fi

    # Move the items to the correct directory.
    if [[ "$filename" == "$output_item" ]] ||
        [[ "$filename" == "$(_strip_filename_extension "$output_item")" ]]; then
        # For archives with "one item with the same name of the archive".
        # For example: "README.TXT.tar.gz" or "README.tar.gz".
        std_output=$(_move_file "rename" "$temp_dir_output/$output_item" "$output_dir/$output_item" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    elif [[ "squashfs-root" == "$output_item" ]]; then
        # For SquashFS.
        std_output=$(_move_file "rename" "$temp_dir_output/$output_item" "$output_dir/$filename" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    elif ((count_root_items > 0)); then
        # For archives with "one item with a different name of the archive" or "multiple items".
        std_output=$(_move_file "rename" "$temp_dir_output" "$output_dir/$filename" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    fi

    # Remove the temporary directory.
    rm -rf -- "$temp_dir_output"
}

_get_command_use() {
    local input_file=$1
    local file_mime=""
    local command_use=""

    # Get the mime type and define what command to use.
    file_mime=$(file --dereference --brief --mime-type -- "$input_file")

    # NOTE: See the file: /usr/share/mime/packages/freedesktop.org.xml
    case "${file_mime,,}" in
    "application/vnd.debian.binary-package") command_use="ar" ;; # deb
    "application/vnd.rar") command_use="unrar" ;;                # rar
    "application/vnd.squashfs") command_use="unsquashfs" ;;      # sqsh
    "application/x-7z-compressed") command_use="7za" ;;          # 7z
    "application/x-iso9660-image") command_use="xorriso" ;;      # iso
    "application/x-lha") command_use="lha" ;;                    # lzh
    "application/x-lzh-compressed") command_use="lha" ;;         # lzh
    "application/x-rar-compressed") command_use="unrar" ;;       # rar
    "application/x-rar") command_use="unrar" ;;                  # rar
    "application/x-zip-compressed") command_use="unzip" ;;       # zip
    "application/x-zip") command_use="unzip" ;;                  # zip
    "application/zip") command_use="unzip" ;;                    # zip
    #"application/bzip2") command_use="bunzip2" ;;                # bz, bz2
    #"application/gzip") command_use="gunzip" ;;                  # gz
    #"application/x-bzip") command_use="bunzip2" ;;               # bz, bz2
    #"application/x-bzip2") command_use="bunzip2" ;;              # bz, bz2
    #"application/x-compress") command_use="uncompress" ;;        # z
    #"application/x-gzip") command_use="gunzip" ;;                # gz
    #"application/x-lrzip") command_use="lrzip" ;;                # lrz
    #"application/x-lz4") command_use="lz4" ;;                    # lz4
    #"application/x-lzip") command_use="lzip" ;;                  # lz
    #"application/x-lzma") command_use="xz_lzma" ;;               # lzma
    #"application/x-lzop") command_use="lzop" ;;                  # lzo
    #"application/x-xz") command_use="xz" ;;                      # xz
    #"application/zstd") command_use="zstd" ;;                    # zst
    *)
        # If not found the 'file_mime', use the extension.
        case "${input_file,,}" in
        *.tar.bz | *.tbz | *.tar.bz2 | *.tbz2 | *.tb2) command_use="tar+bunzip2" ;;
        *.tar.gz | *.tgz) command_use="tar+gunzip" ;;
        *.tar.lrz | *.tlrz) command_use="tar+lrzip" ;;
        *.tar.lz) command_use="tar+lzip" ;;
        *.tar.lz4) command_use="tar+lz4" ;;
        *.tar.lzma | *.tlz) command_use="tar+xz_lzma" ;;
        *.tar.lzo | *.tzo) command_use="tar+lzop" ;;
        *.tar.xz | *.txz) command_use="tar+xz" ;;
        *.tar.z | *.taz) command_use="tar+gunzip_uncompress" ;;
        *.tar.zst | *.tzst) command_use="tar+zstd" ;;
        *.7z) command_use="7za" ;;
        *.bz | *.bz2) command_use="bunzip2" ;;
        *.deb | *.udeb) command_use="ar" ;;
        *.gz) command_use="gunzip" ;;
        *.iso | *.iso9660) command_use="xorriso" ;;
        *.lrz) command_use="lrzip" ;;
        *.lz) command_use="lzip" ;;
        *.lz4) command_use="lz4" ;;
        *.lzh | *.lzs | *.lha) command_use="lha" ;;
        *.lzma) command_use="xz_lzma" ;;
        *.lzo) command_use="lzop" ;;
        *.rar) command_use="unrar" ;;
        *.sqsh | *.squashfs | *.sfs) command_use="unsquashfs" ;;
        *.tar) command_use="tar" ;;
        *.xz) command_use="xz" ;;
        *.z) command_use="uncompress" ;;
        *.zip) command_use="unzip" ;;
        *.zst) command_use="zstd" ;;
        *) command_use="7za" ;;
        esac
        ;;
    esac

    printf "%s" "$command_use"
}

_main "$@"
