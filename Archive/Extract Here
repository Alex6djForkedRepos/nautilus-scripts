#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""
    local input_file=""

    # Execute initial checks.
    _check_dependencies ""
    _display_wait_box
    input_files=$(_get_files "type:file")

    # Check dependencies for each file type.
    for input_file in $input_files; do
        case $(_get_command_use "$input_file") in
        "7za") _check_dependencies "7za(apt:p7zip-full,pacman:p7zip,dnf:p7zip)" ;;
        "ar") _check_dependencies "ar(binutils)" ;;
        "bunzip2") _check_dependencies "bunzip2(bzip2)" ;;
        "gunzip") _check_dependencies "gunzip(gzip)" ;;
        "lha") _check_dependencies "lha(lhasa)" ;;
        "lzip") _check_dependencies "lzip" ;;
        "lzop") _check_dependencies "lzop" ;;
        "tar") _check_dependencies "tar" ;;
        "tar+bz") _check_dependencies "tar bunzip2" ;;
        "tar+gz") _check_dependencies "tar gunzip" ;;
        "tar+lz") _check_dependencies "tar lzip" ;;
        "tar+lzma") _check_dependencies "tar unlzma(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "tar+lzo") _check_dependencies "tar" ;; # TODO: Check the other dependency.
        "tar+xz ") _check_dependencies "tar unxz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "tar+zst") _check_dependencies "tar zstd" ;;
        "uncompress") _check_dependencies "uncompress(gzip)" ;;
        "unlzma") _check_dependencies "unlzma(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "unrar") _check_dependencies "unrar" ;;
        "unsquashfs") _check_dependencies "unsquashfs(squashfs-tools)" ;;
        "unxz") _check_dependencies "unxz(apt:xz-utils,pacman:xz,dnf:xz)" ;;
        "unzip") _check_dependencies "unzip" ;;
        "xorriso") _check_dependencies "xorriso" ;;
        "zstd") _check_dependencies "zstd" ;;
        esac
    done

    export -f _get_command_use

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" ""
    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local count_root_items=""
    local output_item=""
    local std_output=""
    local temp_dir_output=""

    if [[ -z "$output_dir" ]]; then
        output_dir=$(dirname -- "$input_file")
    fi

    # Extract files into a temporary directory.
    filename=$(basename -- "$input_file")             # Remove the path.
    filename=$(_strip_filename_extension "$filename") # Remove the extension.
    temp_dir_output=$(mktemp --directory --tmpdir="$output_dir" "tmp.$filename.XXXXXXXXXX")

    mkdir --parents "$temp_dir_output"
    pushd "$temp_dir_output" &>/dev/null || return 1

    # Extract the archive according to the file extension.
    case $(_get_command_use "$input_file") in
    "7za") std_output=$(7za x -aoa -- "$input_file" 2>&1) ;;
    "ar") std_output=$(ar x -- "$input_file" 2>&1) ;;
    "bunzip2") std_output=$(bunzip2 -- "$input_file" 2>&1) ;;
    "gunzip") std_output=$(gunzip -- "$input_file" 2>&1) ;;
    "lha") std_output=$(lha -x -- "$input_file" 2>&1) ;;
    "lzip") std_output=$(lzip -d -- "$input_file" 2>&1) ;;
    "lzop") std_output=$(lzop -d -- "$input_file" 2>&1) ;;
    "tar") std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    "tar+bz") std_output=$(tar --extract --bzip2 --file="$input_file" 2>&1) ;;
    "tar+gz") std_output=$(tar --extract --gzip --file="$input_file" 2>&1) ;;
    "tar+lz") std_output=$(tar --extract --lzip --file="$input_file" 2>&1) ;;
    "tar+lzma") std_output=$(tar --extract --lzma --file="$input_file" 2>&1) ;;
    "tar+lzo") std_output=$(tar --extract --lzop --file="$input_file" 2>&1) ;;
    "tar+xz ") std_output=$(tar --extract --xz --file="$input_file" 2>&1) ;;
    "tar+zst") std_output=$(tar --extract --zstd --file="$input_file" 2>&1) ;;
    "uncompress") std_output=$(uncompress -- "$input_file" 2>&1) ;;
    "unlzma") std_output=$(unlzma -- "$input_file" 2>&1) ;;
    "unrar") std_output=$(unrar x -- "$input_file" 2>&1) ;;
    "unsquashfs") std_output=$(unsquashfs "$input_file" 2>&1) ;;
    "unxz") std_output=$(unxz -- "$input_file" 2>&1) ;;
    "unzip")
        if _command_exists "7za"; then
            std_output=$(7za x -aoa -- "$input_file" 2>&1)
        else
            std_output=$(unzip -- "$input_file" 2>&1)
        fi
        ;;
    "xorriso") std_output=$(xorriso -osirrox on -indev "$input_file" -find / -exec chmod u+rw -- -extract / . -rollback_end 2>&1) ;;
    "zst") std_output=$(zstd --decompress -- "$input_file" 2>&1) ;;
    esac

    # Check for result errors.
    _check_output "$?" "$std_output" "$input_file" ""

    # Check if the archive has just one item (single file/directory compressed).
    count_root_items=$(find . -mindepth 1 -maxdepth 1 | wc -l)
    if ((count_root_items == 1)); then
        output_item=$(find . -mindepth 1 -maxdepth 1)
        output_item="${output_item#./}"
    fi
    popd &>/dev/null || return 1

    # Try to remove the temporary directory (if it is empty).
    rmdir "$temp_dir_output" &>/dev/null && return 1

    # Move the items to the correct directory.
    if [[ "$filename" == "$output_item" ]] ||
        [[ "$filename" == "$(_strip_filename_extension "$output_item")" ]]; then
        # For archives with "one item with the same name of the archive".
        # For example: "README.TXT.tar.gz" or "README.tar.gz".
        std_output=$(_move_file "rename" "$temp_dir_output/$output_item" "$output_dir/$output_item" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    elif [[ "squashfs-root" == "$output_item" ]]; then
        # For SquashFS.
        std_output=$(_move_file "rename" "$temp_dir_output/$output_item" "$output_dir/$filename" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    elif ((count_root_items > 0)); then
        # For archives with "one item with a different name of the archive" or "multiple items".
        std_output=$(_move_file "rename" "$temp_dir_output" "$output_dir/$filename" 2>&1)
        _check_output "$?" "$std_output" "$input_file" ""
    fi

    # Remove the temporary directory.
    rm -rf -- "$temp_dir_output"
}

_get_command_use() {
    local input_file=$1
    local command_use=""

    # TODO: Change the code bellow to check the mime type instead the file extension.
    case "${input_file,,}" in
    *.tar.bz | *.tbz | *.tar.bz2 | *.tbz2) command_use="tar+bz" ;;
    *.tar.gz | *.tgz | *.tar.Z | *.taz) command_use="tar+gz" ;;
    *.tar.lz | *.tlz) command_use="tar+lz" ;; # TODO: check if exists ".lzip"
    *.tar.lzma | *.tlzma) command_use="tar+lzma" ;;
    *.tar.lzo | *.tzo) command_use="tar+lzo" ;;
    *.tar.xz | *.txz) command_use="tar+xz " ;;
    *.tar.zst | *.tzst) command_use="tar+zst" ;;
    *.bz | *.bz2) command_use="bunzip2" ;;
    *.deb) command_use="ar" ;;
    *.gz) command_use="gunzip" ;;
    *.iso) command_use="xorriso" ;;
    *.lha) command_use="lha" ;;
    *.lzip) command_use="lzip" ;;
    *.lzma) command_use="unlzma" ;;
    *.lzop) command_use="lzop" ;;
    *.rar) command_use="unrar" ;;
    *.squashfs | *.sfs | *.sqsh) command_use="unsquashfs" ;;
    *.tar) command_use="tar" ;;
    *.xz) command_use="unxz" ;;
    *.z) command_use="uncompress" ;;
    *.zip) command_use="unzip" ;;
    *.zst) command_use="zstd" ;; # TODO: check if exists ".zstd"
    *) command_use="7za" ;;
    esac

    printf "%s" "$command_use"
}

_main "$@"
