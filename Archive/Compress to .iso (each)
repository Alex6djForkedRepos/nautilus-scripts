#!/usr/bin/env bash

# Source the script '.common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/.common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    if ! _command_exists "genisoimage" && ! _command_exists "mkisofs" && ! _command_exists "bsdtar"; then
        _check_dependencies "xorriso"
    fi
    _display_wait_box "2"
    input_files=$(_get_files "par_type=directory")
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""
    local volume_id=""
    volume_id=$(basename -- "$input_file" | cut -c 1-32 2>/dev/null)

    # Run the main process.
    output_file=$(_get_output_filename "$input_file" "$output_dir" "par_extension_opt=replace; par_extension=iso")

    # Check if the directory is empty.
    if _is_directory_empty "$input_file"; then
        _log_error "The directory is empty." "$input_file" "" "$output_file"
        return 1
    fi

    # Change to the directory to perform compression.
    _directory_push "$input_file" || return 1

    if _command_exists "xorriso"; then
        std_output=$(xorriso -outdev "$output_file" -volid "$volume_id" -preparer_id "" -joliet on -rockridge on -map . / -charset "utf-8" 2>&1)
    elif _command_exists "genisoimage"; then
        std_output=$(genisoimage -input-charset "utf-8" -o "$output_file" -V "$volume_id" -A "" -sysid "" -J -R . 2>&1)
    elif _command_exists "mkisofs"; then
        std_output=$(mkisofs -input-charset "utf-8" -o "$output_file" -V "$volume_id" -A "" -sysid "" -J -R . 2>&1)
    elif _command_exists "bsdtar"; then
        std_output=$(bsdtar -cf "$output_file" --format=iso9660 --options=rockridge,joliet,volume-id="$volume_id",application-id='' . 2>&1)
    fi
    _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1

    _directory_pop || return 1
}

_main "$@"
