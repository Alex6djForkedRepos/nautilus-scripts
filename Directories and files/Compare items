#!/usr/bin/env bash
# install_keyboard_shortcut=<Control><Shift>C

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "par_type=all; par_min_items=2; par_max_items=3; par_sort_list=true")

    # Run the main process.
    _compare "$input_files"
}

_compare() {
    local input_files=$1
    local num_files_compare=2

    local file_1=""
    local file_2=""
    local file_3=""
    file_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$input_files")
    file_2=$(cut -d "$FIELD_SEPARATOR" -f 2 <<<"$input_files")
    file_3=$(cut -d "$FIELD_SEPARATOR" -f 3 <<<"$input_files")

    _compare_identical "$file_1" "$file_2" "$file_3"

    if [[ -n "$file_3" ]]; then
        num_files_compare=3
    fi

    # Define the command to execute according to file MIME type.
    local command=""
    command=$(_get_command "$file_1" "$num_files_compare" "available")

    # If there is an available command, skip the dependency check.
    if [[ -z "$command" ]]; then
        command=$(_get_command "$file_1" "$num_files_compare" "default")

        # Check dependencies for the command.
        local dependencies=""
        dependencies=$(_get_dependencies "$command")
        _check_dependencies "$dependencies"
    fi

    # Run the main process.
    case $command in
    "code") $command --diff -- "$file_1" "$file_2" & ;;
    "compare")
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two images to compare!"
            _exit_script
        fi
        _compare_imagemagick "$file_1" "$file_2"
        ;;
    "diffpdf")
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two PDFs to compare!"
            _exit_script
        fi
        diffpdf -- "$file_1" "$file_2" &
        ;;
    "meld" | "kdiff3")
        if ((num_files_compare == 2)); then
            $command -- "$file_1" "$file_2" &
        else
            $command -- "$file_1" "$file_2" "$file_3" &
        fi
        ;;
    *"_hex")
        if ((num_files_compare > 2)); then
            _display_error_box "You must select only two binary files to compare!"
            _exit_script
        fi
        _compare_hexa "$command" "$file_1" "$file_2" "$file_3"
        ;;
    esac
}

_compare_hexa() {
    local command=$1
    local file_1=$2
    local file_2=$3
    local file_3=$4

    # Remove the prefix '_hex'.
    command=${command//_hex/}

    # Get the file sizes.
    local file_1_size=""
    local file_2_size=""
    local size_difference=0
    file_1_size=$(_get_file_size "$file_1")
    file_2_size=$(_get_file_size "$file_2")
    size_difference=$(_get_difference "$file_1_size" "$file_2_size")

    # If the files have different sizes,
    # compute a column width for better comparison.
    local cols=24
    if ((size_difference != 0)); then
        cols=$(_get_hex_ideal_cols "$size_difference")
    fi

    # Convert files to hexadecimal text view.
    local file_1_hex=""
    local file_2_hex=""
    file_1_hex="$TEMP_DIR_TASK/$(basename -- "$file_1")"
    file_2_hex="$TEMP_DIR_TASK/$(basename -- "$file_2")"
    xxd -c "$cols" "$file_1" "$file_1_hex"
    xxd -c "$cols" "$file_2" "$file_2_hex"

    # Remove the addresses for better comparison.
    sed -i "s|^[^:]*: ||g" "$file_1_hex"
    sed -i "s|^[^:]*: ||g" "$file_2_hex"

    # Compare and edit the files.
    $command -- "$file_1_hex" "$file_2_hex"

    # Convert to plain hexadecimal dump.
    sed -i "s|  .*||g; s| ||g" "$file_1_hex"
    sed -i "s|  .*||g; s| ||g" "$file_2_hex"

    # Save the files after possible modifications.
    local file_1_modified="$file_1_hex.bin"
    local file_2_modified="$file_2_hex.bin"
    xxd -revert -plain "$file_1_hex" "$file_1_modified"
    xxd -revert -plain "$file_2_hex" "$file_2_modified"
    _move_temp_file_to_output "$file_1" "$file_1_modified" "$file_1"
    _move_temp_file_to_output "$file_2" "$file_2_modified" "$file_2"
}

_compare_identical() {
    local file_1=$1
    local file_2=$2
    local file_3=$3

    # Check if the items (directories or files) are identical.
    local diff_1_2=""
    local diff_1_3=""
    diff_1_2=$(diff --brief --recursive -- "$file_1" "$file_2" 2>&1)
    if [[ -z "$file_3" ]]; then
        if [[ -z "$diff_1_2" ]]; then
            _display_info_box "The two selected items are identical."
            _exit_script
        fi
    else
        diff_1_3=$(diff --brief --recursive -- "$file_1" "$file_3" 2>&1)
        if [[ -z "$diff_1_2" ]] && [[ -z "$diff_1_3" ]]; then
            _display_info_box "The three selected items are identical."
            _exit_script
        fi
    fi
}

_compare_imagemagick() {
    local file_1=$1
    local file_2=$2

    # Check if both images have the same pixel values.
    if compare -metric AE -- "$file_1" "$file_2" null: &>/dev/null; then
        _display_info_box "The two selected images has same pixel values."
        _exit_script
    fi

    # Get image dimensions.
    local dimensions_1=""
    local dimensions_2=""
    dimensions_1=$(identify -format "%wx%h" "$file_1" 2>&1)
    _check_output "$?" "$dimensions_1" "$file_1" "" || return 1
    dimensions_2=$(identify -format "%wx%h" "$file_2" 2>&1)
    _check_output "$?" "$dimensions_2" "$file_2" "" || return 1

    # Compare two images using a visual diff with the 'convert' command.
    local temp_file=""
    temp_file="$(_get_temp_file_dry).png"
    if [[ "$dimensions_1" == "$dimensions_2" ]]; then
        # Compare images with the same dimensions.
        convert \
            '(' "$file_1" -flatten -grayscale Rec709Luminance ')' \
            '(' "$file_2" -flatten -grayscale Rec709Luminance ')' \
            '(' -clone 0-1 -compose darken -composite ')' \
            -channel RGB -combine "$temp_file"
    else
        # Compare images with different dimensions.
        compare -- "$file_1" "$file_2" -compose src "$temp_file"
    fi

    # Get the installed image viewer.
    local image_viewer=""
    image_viewer=$(_xdg_get_default_app "image/jpeg")
    if [[ "$image_viewer" == *"eog" ]]; then
        $image_viewer --new-instance -- "$temp_file"
    else
        $image_viewer -- "$temp_file"
    fi
}

_get_command() {
    local input_file=$1
    local num_files_compare=$2
    local command_status=$3
    local preferred_commands=""
    local command=""

    # Determine the MIME type of the input file.
    local file_mime=""
    file_mime=$(_get_file_mime "$input_file")

    case $file_mime in
    "application/pdf") preferred_commands="diffpdf" ;;
    "inode/directory") preferred_commands="meld" ;;
    "inode/x-empty") preferred_commands="code meld" ;;
    "image/"*) preferred_commands="compare" ;;
    "text/"*) preferred_commands="code meld" ;;
    *)
        local file_encoding=""
        file_encoding=$(_get_file_encoding "$input_file")
        if [[ "$file_encoding" == "binary" ]]; then
            preferred_commands="meld_hex"
        else
            preferred_commands="code meld"
        fi
        ;;
    esac

    # Get the available command in the system.
    preferred_commands=$(tr " " "$FIELD_SEPARATOR" <<<"$preferred_commands")
    local preferred_command=""
    for preferred_command in $preferred_commands; do
        if [[ "$command_status" == "default" ]]; then
            # The default command is the first command of preferred commands.
            command=$preferred_command
            break
        elif [[ "$command_status" == "available" ]]; then
            # Get the available command in the system.
            if _command_exists "$preferred_command"; then
                command=$preferred_command
                break
            fi
        fi
    done

    # Only use VSCode if its installed.
    if [[ "$command" == "code" ]] && [[ "$command_status" == "default" ]]; then
        command="meld"
    fi

    # VSCode does not support three files comparison.
    if [[ "$command" == "code" ]] && ((num_files_compare > 2)); then
        command="meld"
    fi

    # Adjust the selected command for KDE or LXQt desktop environments.
    if [[ "$command" == "meld"* ]]; then
        case "${XDG_CURRENT_DESKTOP,,}" in
        *"kde"* | *"lxqt"*)
            command=${command//meld/kdiff3}
            ;;
        esac
    fi

    printf "%s" "$command"
}

_get_dependencies() {
    local command=$1
    local dependencies=""

    case $command in
    "compare") dependencies="
        command=compare; pkg_manager=apt; package=imagemagick |
        command=compare; pkg_manager=dnf; package=ImageMagick |
        command=compare; pkg_manager=pacman; package=imagemagick |
        command=compare; pkg_manager=zypper; package=ImageMagick |
        command=xdg-open; package=xdg-utils" ;;
    "diffpdf") dependencies="command=diffpdf" ;;
    "kdiff3") dependencies="command=kdiff3" ;;
    "kdiff3_hex") dependencies="command=kdiff3 | command=xxd" ;;
    "meld") dependencies="command=meld" ;;
    "meld_hex") dependencies="command=meld | command=xxd" ;;
    esac
}

_get_hex_ideal_cols() {
    local size_difference=$1
    local cols=24

    local i=0
    for ((i = 23; i >= 5; i--)); do
        if ((size_difference % i == 0)); then
            cols=$i
            break
        fi
    done

    printf "%s" "$cols"
}

_get_difference() {
    local num_1=$1
    local num_2=$2

    # Calculate the positive difference.
    if ((num_1 > num_2)); then
        printf "%s" "$((num_1 - num_2))"
    else
        printf "%s" "$((num_2 - num_1))"
    fi
}

_get_file_size() {
    stat --format="%s" "$1" 2>/dev/null
}

_main "$@"
