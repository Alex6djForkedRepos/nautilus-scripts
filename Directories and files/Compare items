#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""

    # Execute initial checks.
    _check_dependencies ""
    input_files=$(_get_files "par_type=all; par_min_files=2; par_max_files=3; par_sort_list=true")

    # Run the main process.
    _compare "$input_files"
}

_compare() {
    local input_files=$1

    local file_1=""
    local file_2=""
    local file_3=""
    file_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$input_files")
    file_2=$(cut -d "$FIELD_SEPARATOR" -f 2 <<<"$input_files")
    file_3=$(cut -d "$FIELD_SEPARATOR" -f 3 <<<"$input_files")

    # Check if the items (directories or files) are identical.
    local diff_1_2=""
    local diff_1_3=""
    diff_1_2=$(diff --no-dereference --brief --recursive -- "$file_1" "$file_2" 2>&1)
    if [[ -z "$file_3" ]]; then
        if [[ -z "$diff_1_2" ]]; then
            _display_info_box "The two selected items are identical."
            _exit_script
        fi
    else
        diff_1_3=$(diff --no-dereference --brief --recursive -- "$file_1" "$file_3" 2>&1)
        if [[ -z "$diff_1_2" ]] && [[ -z "$diff_1_3" ]]; then
            _display_info_box "The three selected items are identical."
            _exit_script
        fi
    fi

    # Define the command to execute according to file MIME type.
    local command=""
    local file_1_mime=""
    file_1_mime=$(_get_file_mime "$file_1")
    case $file_1_mime in
    "application/pdf") command="diffpdf" ;;
    "inode/directory") command="meld" ;;
    "inode/x-empty") command="meld" ;;
    "image/"*) command="compare" ;;
    "text/"*) command="meld" ;;
    *)
        local file_1_encoding=""
        file_1_encoding=$(_get_file_encoding "$file_1")
        if [[ "$file_1_encoding" == "binary" ]]; then
            command="meld_hexadecimal"
        else
            command="meld"
        fi
        ;;
    esac

    # Check dependencies for the command.
    local dependencies=""
    case $command in
    "compare") dependencies="
        command=compare; pkg_manager=apt; package=imagemagick |
        command=compare; pkg_manager=dnf; package=ImageMagick |
        command=compare; pkg_manager=pacman; package=imagemagick |
        command=xdg-open; package=xdg-utils" ;;
    "diffpdf") dependencies="command=diffpdf" ;;
    "meld" | "meld_hexadecimal") dependencies="command=meld" ;;
    esac
    _check_dependencies "$dependencies"

    # Run the main process.
    case $command in
    "compare")
        if [[ -z "$file_3" ]]; then

            # Check if both images have the same pixel values.
            local pixel_error=""
            pixel_error=$(compare -metric AE -- "$file_1" "$file_2" null: 2>&1)
            if [[ "$pixel_error" == "0" ]]; then
                _display_info_box "The two selected images are identical (same pixel values)."
                _exit_script
            fi

            # Get images dimensions.
            local dimensions_1=""
            local dimensions_2=""
            dimensions_1=$(identify -format "%wx%h" "$file_1")
            dimensions_2=$(identify -format "%wx%h" "$file_2")

            # Compare two images using a visual diff with the 'convert' command.
            local temp_file=""
            temp_file="$(_get_temp_file).png"
            if [[ "$dimensions_1" == "$dimensions_2" ]]; then
                # Compare images with the same dimensions.
                convert \
                    '(' "$file_1" -flatten -grayscale Rec709Luminance ')' \
                    '(' "$file_2" -flatten -grayscale Rec709Luminance ')' \
                    '(' -clone 0-1 -compose darken -composite ')' \
                    -channel RGB -combine "$temp_file"
            else
                # Compare images with different dimensions.
                compare "$file_1" "$file_2" -compose src "$temp_file"
            fi

            $(_xdg_get_default_app "image/png") -- "$temp_file"
        else
            _display_error_box "You must select only two image files to compare!"
            _exit_script
        fi
        ;;
    "diffpdf")
        if [[ -z "$file_3" ]]; then
            diffpdf -- "$file_1" "$file_2" &
        else
            _display_error_box "You must select only two PDFs to compare!"
            _exit_script
        fi
        ;;
    "meld")
        if [[ -z "$file_3" ]]; then
            meld -- "$file_1" "$file_2" &
        else
            meld -- "$file_1" "$file_2" "$file_3" &
        fi
        ;;
    "meld_hexadecimal")
        if [[ -n "$file_3" ]]; then
            _display_error_box "You must select only two files to hexadecimal compare!"
            _exit_script
        fi

        local cols=16
        cols=$(_get_ideal_cols "$file_1" "$file_2")

        meld -- <(_hex_view "$file_1" "$cols") <(_hex_view "$file_2" "$cols") &
        ;;
    esac
}

_get_ideal_cols() {
    local file_1=$1
    local file_2=$2

    local cols=16
    local file_1_size=""
    local file_2_size=""
    local size_diference=0
    file_1_size=$(_get_file_size "$file_1")
    file_2_size=$(_get_file_size "$file_2")
    size_diference=$(_get_diference "$file_1_size" "$file_2_size")

    if ((size_diference != 0)); then
        local i=0
        for ((i = 23; i >= 5; i--)); do
            if ((size_diference % i == 0)); then
                cols=$i
                break
            fi
        done
    fi

    printf "%s" "$cols"
}

_get_diference() {
    local num_1=$1
    local num_2=$2

    # Calculate the positive difference.
    if ((num_1 > num_2)); then
        printf "%s" "$((num_1 - num_2))"
    else
        printf "%s" "$((num_2 - num_1))"
    fi
}

_get_file_size() {
    stat --format="%s" "$1" 2>/dev/null
}

_hex_view() {
    local file=$1
    local cols=$2

    xxd -c "$cols" "$file" | sed "s|^[^:]*: ||g"
}

_main "$@"
